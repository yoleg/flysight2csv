[tool.poetry]
name = "flysight2csv"
version = "0.1.0"
description = "Utilities for finding and reformatting FlySight 2 CSV files (SENSOR.CSV and TRACK.CSV)."
authors = ["Oleg Pryadko <oleg@olegpryadko.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/yoleg/flysight2csv"
documentation = "https://flysight2csv.readthedocs.io"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
    "Topic :: Utilities",
]
packages = [
    { include = "flysight2csv", from = "src" },
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/yoleg/flysight2csv/issues"
"Changelog" = "https://github.com/yoleg/flysight2csv/blob/main/CHANGELOG.md"

[tool.poetry.scripts]
flysight2csv = "flysight2csv.cli:app"

[tool.poetry.dependencies]
python = "^3.10"
rich = ">=10"
typer = {extras = ["all"], version = "^0.9.0"}
simplejson = "^3.19.2"
types-simplejson = "^3.19.0.2"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
isort = "^5.13.2"
black = "^23.12.1"
ruff = "^0.1.9"
mypy = "^1.8.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-parser = ">=0.16"
sphinx = ">=4.0"
furo = ">=2023.5.20"
sphinx-autobuild = ">=2021.3.14"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "src/flysight2csv/version.py:__version__",
    "docs/conf.py:release",
]
build_command = "pip install poetry && poetry build"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore*",
    "ci*",
    "refactor*",
    "test*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true

[tool.pytest.ini_options]
addopts = "-v"
filterwarnings = ["error", "default::DeprecationWarning:.*"]
log_format = '%(asctime)s %(levelname)s %(message)s'
log_date_format = '%Y-%m-%d %H:%M:%S'
pythonpath = ["src"]
log_cli= true
log_level = 'INFO'
testpaths = ["tests"]
markers = [
    "slow",
    "ignore_warnings(selection): Ignore warnings and errors in logs for selected tests.",
]


[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
    'if __name__ == "__main__":',
]

[tool.ruff]
target-version = "py38"
line-length = 120
ignore-init-module-imports = true
ignore = [
    "D202", # No blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in `__init__`
    "D401", # First line of docstring should be in imperative mood
    "S101", # Use of assert
]
select = [
    "B",   # flake8-bugbear
    "D",   # flake8-docstrings
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "F",   # pyflake
    "E",   # pycodestyle
    "W",   # pycodestyle
    "UP",  # pyupgrade
    "I",   # isort
    "RUF", # ruff specific
]

[tool.ruff.per-file-ignores]
"tests/**/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "S101",
]
"cli.py" = ["B008"]  # typer
"setup.py" = ["D100"]
"conftest.py" = ["D100"]
"docs/conf.py" = ["D100"]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["flysight2csv", "tests"]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
lines_between_types = 1
use_parentheses = true
force_sort_within_sections = true
line_length = 120

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ['py310']

[tool.mypy]
mypy_path = "src/"
exclude = [
    'docs/.*',
    'setup.py',
]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
